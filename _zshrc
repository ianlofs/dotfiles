BREW_PREFIX="$(brew --prefix)"

##------------ COMPILER FLAGS --------------##
function setup_compiler_flags () {
  local ldflags=(
    "-L$BREW_PREFIX/opt/readline/lib"
    "-L$BREW_PREFIX/opt/curl/lib"
    "-L$BREW_PREFIX/opt/libpq/lib"
    "-L$BREW_PREFIX/opt/openssl@1.1/lib"
    "-L$BREW_PREFIX/opt/libffi/lib"
    "-L$BREW_PREFIX/opt/ruby/lib"
    "-L$BREW_PREFIX/opt/zlib/lib"
    )
  local cppflags=(
    "-I$BREW_PREFIX/opt/readline/include"
    "-I$BREW_PREFIX/opt/openjdk@11/include"
    "-I$BREW_PREFIX/opt/curl/include"
    "-I$BREW_PREFIX/opt/libpq/include"
    "-I$BREW_PREFIX/opt/openssl@1.1/include"
    "-I$BREW_PREFIX/opt/libffi/include"
    "-I$BREW_PREFIX/opt/ruby/include"
    "-I$BREW_PREFIX/opt/zlib/include"
    "-I$BREW_PREFIX/opt/openjdk@11/include"
  )
  export LDFLAGS="${ldflags[*]}"
  export CPPFLAGS="${cppflags[*]}"
}
setup_compiler_flags
##------------------------------------------##

##------------ PATH CONFIG -----------------##
export PATH="$BREW_PREFIX/opt/gnu-getopt/bin:$PATH" # gnu-getopt
export PATH="$BREW_PREFIX/opt/unzip/bin:$PATH" # unzip
export PATH="$BREW_PREFIX/opt/grep/libexec/gnubin:$PATH" # gnu-grep
export PATH="$BREW_PREFIX/opt/gnu-sed/libexec/gnubin:$PATH" # gnu-sed
export PATH="$BREW_PREFIX/opt/gnu-tar/libexec/gnubin:$PATH" # gnu-tar
export PATH="$BREW_PREFIX/opt/curl/bin:$PATH" # brew curl
export PATH="$BREW_PREFIX/opt/libpq/bin:$PATH" # lib-pq (psql)
export PATH="$BREW_PREFIX/opt/coreutils/libexec/gnubin:$PATH"
export PATH="/Applications/SnowSQL.app/Contents/MacOS:$PATH" # snowsql
export PATH="$PATH:$HOME/.bin" # custom executables
export PATH="$PATH:$HOME/.local/bin" # moar custom executables
export PATH="$PATH:$HOME/.docker/bin" # docker stuff
export PATH="$BREW_PREFIX/opt/openjdk@11/bin:$PATH"[
##------------------------------------------##


##----------------Aliases------------------##
# basic shell stuff
alias ls='ls -G'
alias l='ls -lAh'
# kube stuff
alias kc='kubectl'
alias kcs='kubectl get'
# kubectx
alias kctx='kubectx'
alias kns='kubens'
# ssh
alias ssh='TERM=linux ssh'
##-----------------------------------------##

##----------Shared History-----------------##

## Command history configuration
if [ -z "$HISTFILE" ]; then
    HISTFILE=$HOME/.zsh_history
fi

export HISTSIZE=10000
export SAVEHIST=10000

# Show history
case $HIST_STAMPS in
  "mm/dd/yyyy") alias history='fc -fl 1' ;;
  "dd.mm.yyyy") alias history='fc -El 1' ;;
  "yyyy-mm-dd") alias history='fc -il 1' ;;
  *) alias history='fc -l 1' ;;
esac

setopt append_history
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups # ignore duplication command history list
setopt hist_ignore_space
setopt hist_verify
setopt inc_append_history
setopt share_history # share command history data
##-----------------------------------------##

##-------------Setup gpg-agent-------------##

# We only want to run gpg-agent on our local workstation. We accomplish that by trying to
# detect if this shell was spawned from ssh or not. If the SSH_CLIENT env var is set, then
# this is probably a remote login and we don't want to run gpg-agent.

if [[ -z "$SSH_CLIENT" ]]; then
  # gpg >= 2.1, use gpgconf
  gpgconf --launch gpg-agent
  if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]; then
    SSH_AUTH_SOCK="$(gpgconf --list-dirs agent-ssh-socket)"
    export SSH_AUTH_SOCK
  fi

  GPG_TTY=$(tty)
  export GPG_TTY

  alias restart_gpg_agent="gpgconf --kill gpg-agent; killall -9 gpg-agent ; gpgconf --launch gpg-agent"
fi
##-----------------------------------------##

##------------Golang stuff-----------------##
export GOPATH=$HOME/go
export PATH=$PATH:$HOME/go/bin
##-----------------------------------------##

##----------------- FZF -------------------##
[ -f "$HOME/.fzf.zsh" ] && source "$HOME/.fzf.zsh"
##-----------------------------------------##

##------------ POETRY CONFIG --------------##
export POETRY_VIRTUALENVS_IN_PROJECT=true
export PATH="$HOME/.poetry/bin:$PATH"
##-----------------------------------------##

##---------- Powerline go stuff -----------##
function powerline_precmd () {
    PS1="$(powerline-go -error $? -shell zsh -newline -modules venv,user,host,ssh,cwd,perms,git,jobs,exit)"
}

function install_powerline_precmd () {
  for s in "${precmd_functions[@]}"; do
    if [ "$s" = "powerline_precmd" ]; then
      return
    fi
  done
  precmd_functions+=(powerline_precmd)
}

if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi
##-----------------------------------------##

#--------- SETUP ZSH AUTOSUGGESTIONS -------##
source $BREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh
export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#ff00ff,bg=cyan,bold,underline'
export ZSH_AUTOSUGGEST_STRATEGY=(completion history)
bindkey '^I' autosuggest-accept
##------------------------------------------##

##-----------------asdf---------------------##
. $BREW_PREFIX/opt/asdf/libexec/asdf.sh
##------------------------------------------##

#------------- SETUP COMPLETIONS -----------##
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"

  autoload -Uz compinit
  compinit
fi
##------------------------------------------##
