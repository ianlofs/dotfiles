#!/usr/bin/env bash
# Based on https://github.com/sontek/dotfiles/

set -e

GIT_URL="git@github.com:joemiller/dotfiles"
INSTALL_DIR="$HOME/.dotfiles"

while getopts "nh" opt; do
    case $opt in
        n) RUN_GIT='no';;
        h) usage;;
    esac
done

usage() {
    echo "$0 [options]"
    echo
    echo " -n       Do not run any git actions"
    echo " -h       This help message"
    exit 0
}

symlink() {
  local source="$1"
  local target="$2"
  echo "symlinking: $source -> $target"
  ln -nsf "$source" "$target"
}

install_software() {
  curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash
  wget https://repo.continuum.io/miniconda/Miniconda2-latest-Linux-x86_64.sh
  chmod 744 Miniconda2-latest-Linux-x86_64.sh
  ./Miniconda2-latest-Linux-x86_64.sh
  curl -sSL https://get.rvm.io | bash
}
# does ~/.dotfiles exist? If not, this must be a first install.
# skip all git actions if '-n' argument is specified
if [ "$RUN_GIT" != 'no' ]; then
    if [ ! -e "$HOME/.dotfiles" ]; then
        git clone "$GIT_URL" "$INSTALL_DIR"
        cd "$INSTALL_DIR"
    else
        cd "$INSTALL_DIR"
        if ! git diff-index --quiet HEAD --; then
            echo 'WARNING: There are uncommitted local changes'
        fi
        git fetch
        git pull
    fi
else
    echo "Skipping git actions"
fi

# symlink any files matching ~/.dotfiles/_<NAME> to ~/.<NAME>
for i in _*; do
    source="${PWD}/$i"
    target="${HOME}/${i/_/.}"

    # special case for .bashrc and .bash_profile for oneboxes at work: if already exists, don't overwrite
    if [ "$i" = "_bashrc" ] || [ "$i" = "_bash_profile" ]; then
        if [ -f "$target" ]; then
            echo "special case file $target already exists, skipping symlink"
            continue
        fi
    fi

    # special case for .gnupg. Instead of symlinking the whole home dir, we only symlink specific files
    if [ "$i" = "_gnupg" ]; then
      [ ! -e "${HOME}/.gnupg" ] && mkdir -p "${HOME}/.gnupg"
      for f in "$source"/*; do
        symlink "$f" "$HOME/.gnupg/$(basename "$f")"
      done

      continue
    fi

    # everything else gets symlinked according to the standard pattern
    if [ -e "${target}" ] && [ ! -h "${target}" ]; then
        backup="${HOME}/.save.${i}"
        echo "${target} already exists. Moving to ${backup}"
        mv "${target}" "${backup}"
    fi
    symlink "$source" "$target"
done
 install_software
